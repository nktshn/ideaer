// placing:

.r {
    display: flex;
    flex-direction: row;
    box-sizing: border-box;
}

.c {
    display: flex;
    flex-direction: column;
    box-sizing: border-box;
}

.jb {
    justify-content: space-between;
}

.jc {
    justify-content: center;
}

.je {
    justify-content: flex-end;
}

.ac {
    align-items: center;
}

.wr {
    flex-wrap: wrap;
}

// boxing:

.w {
    width: 100%;
}

.h {
    height: fit-content;
}

.minh {
    min-height: 100%;
}

.minw {
    min-width: 100%;
    width: 100%;
}

// spacing:

@function getPadding($level) {
    $res: map-get((
        1 : 0.4rem,
        2 : 1.5rem,
        3 : 2rem, 
    ), $level);
    @return $res; 
}

// fucking power of scss!
$classTypes: (
    m: margin,
    p: padding,
    
    ml: margin-left,
    mr: margin-right,
    mt: margin-top,
    mb: margin-bottom,

    pl: padding-left,
    pr: padding-right,
    pb: padding-bottom,
    pt: padding-top,
);
@mixin generateMarginsAndPaddings($len) {
    @each $className, $styleName in $classTypes {
        @for $i from 1 through $len {
            .#{$className}#{$i} { 
                #{$styleName} : getPadding($i); 
            }
        }
    }
};
@function getPadding($level) {
    $res: map-get((
        1 : 0.8rem,
        2 : 1.5rem,
        3 : 2rem, 
    ), $level);
    @return $res; 
};
@include generateMarginsAndPaddings(3);

// mixins 

@mixin border($color) {
    box-shadow: 0px 0px 0px 1px $color;
    border-radius: 6px;
}


@mixin bottomLine($color) {
    box-shadow: 0px 1px 0px 0px #efefef;
}